CXX = %CXX%
CXX_WARN = -Wall -Wextra -pedantic
CXX_NOWARN = -Wno-missing-field-initializers -Wno-unused-command-line-argument
CXX_OPT = -O3
CXX_MISC = -fPIC
CXX_INCLUDE = -Iinclude \
              -I${PWD}/lib/boost/config/include \
              -I${PWD}/lib/boost/system/include \
              -I${PWD}/lib/boost/detail/include \
              -I${PWD}/lib/boost/utility/include \
              -I${PWD}/lib/boost/core/include \
              -I${PWD}/lib/boost/type_traits/include \
              -I${PWD}/lib/boost/mpl/include \
              -I${PWD}/lib/boost/preprocessor/include \
              -I${PWD}/lib/boost/predef/include \
              -I${PWD}/lib/boost/iterator/include \
              -I${PWD}/lib/boost/smart_ptr/include \
              -I${PWD}/lib/boost/exception/include \
              -I${PWD}/lib/boost/io/include \
              -I${PWD}/lib/boost/functional/include \
              -I${PWD}/lib/boost/range/include \
              -I${PWD}/lib/boost/include \
              -I${PWD}/lib/boost/filesystem/include \
              -I/usr/local/include \
              -I/opt/local/include/lua5.2 \
              -I/opt/local/include \
              -I/usr/include \
              -I/usr/include/lua5.2
CXX_PLATFORM_FLAGS = %CXX_PLATFORM_FLAGS%
CXX_FLAGS += -std=c++1y ${CXX_WARN} ${CXX_NOWARN} ${CXX_OPT} \
             ${CXX_MISC} ${CXX_INCLUDE} ${CXX_PLATFORM_FLAGS}

CLANG_DIR = %CLANG_DIR%
LD_PLATFORM_LIBS = %LD_PLATFORM_LIBS%
LD_LIBS += ${LD_PLATFORM_LIBS} -pthread $(LUA_LIB) -lz -lncurses \
					 -L/usr/local/lib \
					 -L/usr/lib \
           ${CLANG_DIR}/lib/libclang.a \
           ${CLANG_DIR}/lib/libclangIndex.a \
           ${CLANG_DIR}/lib/libclangFormat.a \
           ${CLANG_DIR}/lib/libclangFrontendTool.a \
           ${CLANG_DIR}/lib/libclangFrontend.a \
           ${CLANG_DIR}/lib/libclangDriver.a \
           ${CLANG_DIR}/lib/libclangSerialization.a \
           ${CLANG_DIR}/lib/libclangCodeGen.a \
           ${CLANG_DIR}/lib/libclangParse.a \
           ${CLANG_DIR}/lib/libclangSema.a \
           ${CLANG_DIR}/lib/libclangStaticAnalyzerFrontend.a \
           ${CLANG_DIR}/lib/libclangStaticAnalyzerCheckers.a \
           ${CLANG_DIR}/lib/libclangStaticAnalyzerCore.a \
           ${CLANG_DIR}/lib/libclangAnalysis.a \
           ${CLANG_DIR}/lib/libclangARCMigrate.a \
           ${CLANG_DIR}/lib/libclangRewriteFrontend.a \
           ${CLANG_DIR}/lib/libclangRewrite.a \
           ${CLANG_DIR}/lib/libclangEdit.a \
           ${CLANG_DIR}/lib/libclangAST.a \
           ${CLANG_DIR}/lib/libclangASTMatchers.a \
           ${CLANG_DIR}/lib/libclangDynamicASTMatchers.a \
           ${CLANG_DIR}/lib/libclangLex.a \
           ${CLANG_DIR}/lib/libclangBasic.a \
           ${CLANG_DIR}/lib/libclangTooling.a \
           ${CLANG_DIR}/lib/libclangToolingCore.a \
           ${CLANG_DIR}/lib/libLLVMLTO.a \
           ${CLANG_DIR}/lib/libLLVMObjCARCOpts.a \
           ${CLANG_DIR}/lib/libLLVMLinker.a \
           ${CLANG_DIR}/lib/libLLVMBitWriter.a \
           ${CLANG_DIR}/lib/libLLVMIRReader.a \
           ${CLANG_DIR}/lib/libLLVMAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMR600CodeGen.a \
           ${CLANG_DIR}/lib/libLLVMipo.a \
           ${CLANG_DIR}/lib/libLLVMVectorize.a \
           ${CLANG_DIR}/lib/libLLVMR600AsmParser.a \
           ${CLANG_DIR}/lib/libLLVMR600Desc.a \
           ${CLANG_DIR}/lib/libLLVMR600Info.a \
           ${CLANG_DIR}/lib/libLLVMR600AsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMSystemZDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMSystemZCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMSystemZAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMSystemZDesc.a \
           ${CLANG_DIR}/lib/libLLVMSystemZInfo.a \
           ${CLANG_DIR}/lib/libLLVMSystemZAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMHexagonDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMHexagonCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMHexagonDesc.a \
           ${CLANG_DIR}/lib/libLLVMHexagonInfo.a \
           ${CLANG_DIR}/lib/libLLVMNVPTXCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMNVPTXDesc.a \
           ${CLANG_DIR}/lib/libLLVMNVPTXInfo.a \
           ${CLANG_DIR}/lib/libLLVMNVPTXAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMCppBackendCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMCppBackendInfo.a \
           ${CLANG_DIR}/lib/libLLVMMSP430CodeGen.a \
           ${CLANG_DIR}/lib/libLLVMMSP430Desc.a \
           ${CLANG_DIR}/lib/libLLVMMSP430Info.a \
           ${CLANG_DIR}/lib/libLLVMMSP430AsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMXCoreDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMXCoreCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMXCoreDesc.a \
           ${CLANG_DIR}/lib/libLLVMXCoreInfo.a \
           ${CLANG_DIR}/lib/libLLVMXCoreAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMMipsDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMMipsCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMMipsAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMMipsDesc.a \
           ${CLANG_DIR}/lib/libLLVMMipsInfo.a \
           ${CLANG_DIR}/lib/libLLVMMipsAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMAArch64Disassembler.a \
           ${CLANG_DIR}/lib/libLLVMAArch64CodeGen.a \
           ${CLANG_DIR}/lib/libLLVMAArch64AsmParser.a \
           ${CLANG_DIR}/lib/libLLVMAArch64Desc.a \
           ${CLANG_DIR}/lib/libLLVMAArch64Info.a \
           ${CLANG_DIR}/lib/libLLVMAArch64AsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMAArch64Utils.a \
           ${CLANG_DIR}/lib/libLLVMARMDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMARMCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMARMAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMARMDesc.a \
           ${CLANG_DIR}/lib/libLLVMARMInfo.a \
           ${CLANG_DIR}/lib/libLLVMARMAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCDesc.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCInfo.a \
           ${CLANG_DIR}/lib/libLLVMPowerPCAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMSparcDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMSparcCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMSparcAsmParser.a \
           ${CLANG_DIR}/lib/libLLVMSparcDesc.a \
           ${CLANG_DIR}/lib/libLLVMSparcInfo.a \
           ${CLANG_DIR}/lib/libLLVMSparcAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMTableGen.a \
           ${CLANG_DIR}/lib/libLLVMDebugInfo.a \
           ${CLANG_DIR}/lib/libLLVMOption.a \
           ${CLANG_DIR}/lib/libLLVMX86Disassembler.a \
           ${CLANG_DIR}/lib/libLLVMX86AsmParser.a \
           ${CLANG_DIR}/lib/libLLVMX86CodeGen.a \
           ${CLANG_DIR}/lib/libLLVMSelectionDAG.a \
           ${CLANG_DIR}/lib/libLLVMAsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMX86Desc.a \
           ${CLANG_DIR}/lib/libLLVMMCDisassembler.a \
           ${CLANG_DIR}/lib/libLLVMX86Info.a \
           ${CLANG_DIR}/lib/libLLVMX86AsmPrinter.a \
           ${CLANG_DIR}/lib/libLLVMX86Utils.a \
           ${CLANG_DIR}/lib/libLLVMMCJIT.a \
           ${CLANG_DIR}/lib/libLLVMLineEditor.a \
           ${CLANG_DIR}/lib/libLLVMInstrumentation.a \
           ${CLANG_DIR}/lib/libLLVMInterpreter.a \
           ${CLANG_DIR}/lib/libLLVMExecutionEngine.a \
           ${CLANG_DIR}/lib/libLLVMRuntimeDyld.a \
           ${CLANG_DIR}/lib/libLLVMCodeGen.a \
           ${CLANG_DIR}/lib/libLLVMScalarOpts.a \
           ${CLANG_DIR}/lib/libLLVMProfileData.a \
           ${CLANG_DIR}/lib/libLLVMObject.a \
           ${CLANG_DIR}/lib/libLLVMMCParser.a \
           ${CLANG_DIR}/lib/libLLVMBitReader.a \
           ${CLANG_DIR}/lib/libLLVMInstCombine.a \
           ${CLANG_DIR}/lib/libLLVMTransformUtils.a \
           ${CLANG_DIR}/lib/libLLVMipa.a \
           ${CLANG_DIR}/lib/libLLVMAnalysis.a \
           ${CLANG_DIR}/lib/libLLVMTarget.a \
           ${CLANG_DIR}/lib/libLLVMMC.a \
           ${CLANG_DIR}/lib/libLLVMCore.a \
           ${CLANG_DIR}/lib/libLLVMSupport.a \

PROJECT = %PROJECT%

OUT_DIR = bin/
OBJ_DIR = ${OUT_DIR}obj/
TARGET = ${OUT_DIR}color_coded.so
BOOST_SYSTEM = ${OUT_DIR}libcolor_coded_boost_system.a
BOOST_FILESYSTEM = ${OUT_DIR}libcolor_coded_boost_filesystem.a

OBJS := $(patsubst %.cpp,%.cpp.o,$(wildcard src/*.cpp))
OBJS := $(filter-out ${EXCLUDE},${OBJS})
SRCS := ${OBJS:.cpp.o=.cpp}
OUT_OBJS := $(foreach obj,${OBJS}, ${OBJ_DIR}${obj})

log = echo "$(1)" 1>&2

all: ${TARGET}

${TARGET}_setup: setup ${BOOST_SYSTEM} ${BOOST_FILESYSTEM}
	$(call log,"Building ${TARGET}")

${TARGET}: ${TARGET}_setup ${OBJS}
	$(call log,"Linking $@")
	${CXX} -shared -o $@ ${CXX_FLAGS} ${OUT_OBJS} ${LD_LIBS} \
          -Llib/boost/system/bin -Llib/boost/filesystem/bin \
	  -lcolor_coded_boost_system -lcolor_coded_boost_filesystem

setup:
	mkdir -p ${OBJ_DIR} ${OUT_DIR}
	./lib/track_api # Update the API version before compiling

clean:
	rm -f ${TARGET} ${OUT_OBJS}
	${MAKE} -C lib/boost/system CXX=${CXX} OUT_DIR=${OUT_DIR} clean
	${MAKE} -C lib/boost/filesystem CXX=${CXX} OUT_DIR=${OUT_DIR} clean
	$(call log,"Cleaned ${TARGET}")

${BOOST_SYSTEM}: setup
	${MAKE} -C lib/boost/system CXX="${CXX}" OUT_DIR="${OUT_DIR}" CXX_FLAGS="${CXX_FLAGS}"

${BOOST_FILESYSTEM}: setup ${BOOST_SYSTEM}
	${MAKE} -C lib/boost/filesystem CXX="${CXX}" OUT_DIR="${OUT_DIR}" CXX_FLAGS="${CXX_FLAGS}"

%.cpp.o: %.cpp
	$(call log,"  Compiling $<")
	mkdir -p ${OBJ_DIR}$(dir $<)
	${CXX} -c ${CXX_FLAGS} $< -o ${OBJ_DIR}$@

# For internal use only
open:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c ":source ${PWD}/plugin/color_coded.vim"

open_with_plugins:
	gvim \
		-c "set runtimepath^=${PWD}" \
		-c ":source ${PWD}/plugin/color_coded.vim"

run:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		test/simple.cpp

run_real:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		src/main.cpp

run_stress:
	gvim --noplugin \
		-c "set runtimepath^=${PWD}" \
		-c "source ${PWD}/plugin/color_coded.vim" \
		test/stress.cpp

.SILENT:

.PHONY: all setup ${TARGET}_setup clean open run run_real run_stress
